{{ 'annoncement-bar-section.css' |  asset_url |  stylesheet_tag }}
<div class="annoncement_bar_section">
    {% for block in section.blocks %}
    <div class="annoncement_block" style="background-color: {{ section.settings.bg_primary_color }} ;">
        <h1 style="color: {{ section.settings.text_color }};">{{ block.settings.annonce_text}}</h1>
    </div>
        
    {% endfor %}
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
    const announcementBlocks = document.querySelectorAll('.annoncement_block');
    const sectionWidth = document.querySelector('.annoncement_bar_section').offsetWidth;

    let currentIndex = 0;

    setInterval(() => {
        const nextIndex = (currentIndex + 1) % announcementBlocks.length;
        scrollToElement(announcementBlocks[nextIndex]);
        currentIndex = nextIndex;
    }, 2000);

    function scrollToElement(element) {
        const scrollDistance = element.offsetLeft;
        const section = document.querySelector('.annoncement_bar_section');
        const currentPosition = section.scrollLeft;
        const targetPosition = scrollDistance - (sectionWidth - element.offsetWidth) / 2; // Center the element

        animateScroll(section, currentPosition, targetPosition, 1000); // Adjust duration (1000ms) as needed
    }

    function animateScroll(section, currentPosition, targetPosition, duration) {
        const startTime = performance.now();
        const endTime = startTime + duration;

        function step() {
            const currentTime = performance.now();
            const progress = Math.min((currentTime - startTime) / duration, 1);
            const easedProgress = easeInOutCubic(progress);
            const scrollPosition = currentPosition + (targetPosition - currentPosition) * easedProgress;

            section.scrollLeft = scrollPosition;

            if (currentTime < endTime) {
                requestAnimationFrame(step);
            }
        }

        requestAnimationFrame(step);
    }

    function easeInOutCubic(t) {
        return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    }
});

</script>
{% schema %}
{
    "name": "Annoncement",
    "settings": [
                {
            "type": "color",
            "id": "bg_primary_color",
            "label": "Select Background Color",
            "default": "#1A1A1A"
            },
            {
            "type": "color",
            "id": "text_color",
            "label": "Select Text Color",
            "default": "#ffffff"
            }
        ],
        "blocks": [
            {
                "name": "Annoncement",
                "type": "Annoncement",
                "settings": [
                    {
                        "type": "text",
                        "id": "annonce_text",
                        "label": "Annoncment Text"
                    }
                ]
            }
        ],
        "presets": [
            {
                "name": "Annoncement"
            }
        ]
}
{% endschema %}